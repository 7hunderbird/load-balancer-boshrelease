---
name: haproxy
description: |
  The HAProxy server can be used to terminate SSL in front of the Routers.
  Each HAProxy instance should point to multiple Routers..

packages:
  - haproxy
  - ttar

templates:
  bin/haproxy:      bin/haproxy
  etc/haproxy.conf: etc/haproxy.conf
  etc/certs.ttar:   etc/certs.ttar
  etc/redir.ttar:   etc/redir.ttar

properties:
  expert.config:
    description: |
      (expert mode) Ignore all other options and provide the contnts of the
      haproxy configuration file explicitly.  You are responsible for
      getting all of the paths (relative to `/var/vcap`, at a minimum)
      right.

  tuning.processes:
    default: 1
    description: |
      How many worker processes to spin up to handle incoming requests.

      If you configure more than one process, each will get its own
      `stats` socket, in `/var/vcap/sys/run/haproxy/stats$N`, where `$N`
      is a unique number starting from 1.

      Otherwise, with `process: 1`, you only get the single `stats` socket,
      at `/var/vcap/sys/run/haproxy/stats.sock`.

  tuning.buffers:
    default: 16K
    description: |
      Buffer size to use for requests, any requests larger than this (large
      cookies or query strings) will result in an HTTP 5xx Gateway Error.

      Can be specified in bytes (with a suffix of 'b', or no suffix at all),
      kiobytes (i.e. `16k`) or megabytes (i.e. `4M`).

  logging.destination:
    default: /dev/log
    example: syslog.example.com:514
    description: |
      Where to send haproxy log output.  By default, this will be sent
      to the local host's syslog process, via `/dev/log`, but you can set
      haproxy up to log remotely by setting a host/ip and port.

  logging.facility:
    default: daemon
    description: |
      What syslog facility to log haproxy messages as.  Must be a valid
      facility name, per haproxy (and to a lesser extent, RFC-5424).

      Valid values are:
        kern   user   mail   daemon auth   syslog lpr    news
        uucp   cron   auth2  ftp    ntp    audit  alert  cron2
        local0 local1 local2 local3 local4 local5 local6 local7

  logging.level:
    default: info
    description: |
      How verbose do you want the haproxy server logs to be?

      Must be a log level name known to haproxy; one of:
        emerg  alert  crit   err    warning notice info  debug

  compress-types:
    default: []
    description: |
      List of MIME types to enable automatic front-end response compression,
      i.e.: 'text/html', 'text/plain', and 'text/css'.

  timeouts.connect:
    default:     5s
    description: |
      How long to allow TCP connections made by haproxy to a load-balanced
      backend, before giving up.  This timeout stops being relevant once the
      TCP three-way handshake (SYN - SYN/ACK - ACK) is completed, but before
      any meaningful HTTP protocol data has been sent.

  timeouts.client:
    default:     30s
    description: |
      How long to allow connections from clients to the haproxy front door
      to idle (i.e. no HTTP traffic) before closing them.

  timeouts.server:
    default:     30s
    description: |
      How long to allow connections from haproxy to backend servers to idle
      (i.e. no HTTP traffic) before closing them.

  timeouts.websocket:
    default:     1h
    description: |
      How long to allow an upgraded HTTP WebSocket channel to idle without
      sending any data (including WS ping/pong messages) before closing both
      ends of the connection.

  timeouts.keepalive:
    default:     0.5s
    description: |
      How long to allow an HTTP connection with `Connection: keepalive` to
      idle (without sending any packets) before it is closed.

  timeouts.request:
    default:     5s
    description: |
      How long to allow clients to transmit the headers of their HTTP
      request.

      Most clients will try to be quick about it, hence the high default
      value of 5 seconds.  This setting is aimed primarily at ensuring that
      malicious clients cannot mount a denial-of-service attack against the
      haproxy by quickly setting up the TCP connection and then delay
      sending the full request.

  timeouts.queue:
    default:     30s
    description: |
      How long to allow a client connection to sit in the "pending" queue,
      waiting to be connected with a backend, before closing it.

  tls.protocols:
    default: [tlsv1.2]
    description: |
      Which TLS protocols to allow clients to speak to the haproxy server.
      Precisely which of these is used on any given connection is negotiated
      by the client and haproxy, but will be limited to this set.

      The following values are recognized:

          sslv3   tlsv1.0  tlsv1.1  tlsv1.2  tls-tickets

      This must be specified as a YAML list, i.e.:

          tls:
            protocols:
              - tlsv1.1
              - tlsv1.2

  tls.ciphers:
    description: |
      Allowed TLS ciphers, for encryption of traffic and key exchange.
      Precisely which of these is used on any given connection is negotiated
      by the client and haproxy, but will be limited to this set.

      This must be specified as a YAML list, i.e.:

          tls:
            ciphers:
              - ECDHE-RSA-DES-CBC3-SHA
              - ECDHE-ECDSA-DES-CBC3-SHA
              # etc.

    default:
      - ECDHE-ECDSA-CHACHA20-POLY1305
      - ECDHE-RSA-CHACHA20-POLY1305
      - ECDHE-ECDSA-AES128-GCM-SHA256
      - ECDHE-RSA-AES128-GCM-SHA256
      - ECDHE-ECDSA-AES256-GCM-SHA384
      - ECDHE-RSA-AES256-GCM-SHA384
      - DHE-RSA-AES128-GCM-SHA256
      - DHE-RSA-AES256-GCM-SHA384
      - ECDHE-ECDSA-AES128-SHA256
      - ECDHE-RSA-AES128-SHA256
      - ECDHE-ECDSA-AES128-SHA
      - ECDHE-RSA-AES256-SHA384
      - ECDHE-RSA-AES128-SHA
      - ECDHE-ECDSA-AES256-SHA384
      - ECDHE-ECDSA-AES256-SHA
      - ECDHE-RSA-AES256-SHA
      - DHE-RSA-AES128-SHA256
      - DHE-RSA-AES128-SHA
      - DHE-RSA-AES256-SHA256
      - DHE-RSA-AES256-SHA
      - ECDHE-ECDSA-DES-CBC3-SHA
      - ECDHE-RSA-DES-CBC3-SHA
      - EDH-RSA-DES-CBC3-SHA
      - AES128-GCM-SHA256
      - AES256-GCM-SHA384
      - AES128-SHA256
      - AES256-SHA256
      - AES128-SHA
      - AES256-SHA
      - DES-CBC3-SHA
      - !DSS

  tls.dh-params-max-bits:
    default: 2048
    description: |
      Maximum size of DH params (in bits) for generating epmehmeral keys
      during key exchange.  Can be either 1024 (not recommended), 2048 (the
      default), or 4096.

  load-balancers:
    description: |-
      A list of load balancer definitions.  Each item in the list must be an
      object with the following properties:

        frontend:
          accept_proxy:    true|false
          mode:            Treat contents at level 7 (http) or level 4 (tcp) -- defaults to tcp
          port:            Port to bind to - defaults to 443 if <this>.tls.certificates is specified, 80 otherwise
          tls:
            protocols:     List of allowed protocols -- defaults to `tls.protocols` if not specified, and uses the
                           same valid values.
            ciphers:       Colon-separated string of TLS ciphers allowed for this load balancer -- uses `tls.ciphers`
                           as default if not specified, and uses same format and valid values. 
            certificates:  List of certificate pems (key, cert and bundle-chain) - REQUIRED

        acls:
          domains:         List of domains to match - optional
          allow:           Whitelist of IPs (accepts CIDR) - all others denied
          deny:            Blacklist of IPs (accepts CIDR) - all others allowed
                           Only one of `allow` or `deny` can be specified

        redirect_to_https: Can either be a string "all", or a key "domains:" with a list of domains to redirect to https

        block_all:         Block all traffic on this listener -- can be used in conjuction with `redirect_to_https` with a list
                           of domains to redirect them, and drop anything else.

        backend:
          addresses:       List of addresses to send traffic to.  Can optionally specify the port, does NOT accept CIDR notation.
          port:            Optional - will use (this).frontend.port by default, and is overridden if the port is specified in the
                           addresses
          compress-types:  List of mime-types to compress -- defaults to `compress-types` at the top level.
