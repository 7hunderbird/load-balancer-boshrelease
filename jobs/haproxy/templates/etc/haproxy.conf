<% # vim:ft=eruby
if p("expert.config",nil) %><%= p("expert.config") %><%
else
  # Ruby functions and variables to make the template more readable

  # Helper function for sub-structs
  def deconstruct(x)
    return x.map {|a| deconstruct(a)} if x.is_a? Array
    return x unless x.is_a? OpenStruct
    h = {}
    x.to_h.each do |k,v|
      h[k.to_s] = deconstruct(v)
    end
    return h
  end

  def u2bytes(s)
    m = s.match(/^(.*?)([bkm]?)$/i)
    case m[2]
    when 'k', 'K'
      return m[1].to_f * 1024
    when 'm', 'M'
      return m[1].to_f * 1024 * 1024
    else
      return m[1].to_i
    end
  end

  def u2seconds(s)
    m = s.match(/^(.*)([smh]?)$/i)
    case m[2]
    when 'm', 'M'
      return m[1].to_f * 60
    when 'h', 'H'
      return m[1].to_f * 60 * 60
    else
      return m[1].to_f
    end
  end

  def ciphers(l)
    l.join(':')
  end

  def protocols(l, context)
    valid   = ["sslv3", "tlsv1.0", "tlsv1.1","tlsv1.2", "tls-tickets"]
    defined = l.inject({}) { |h,k| h[k.downcase] = 1; h }
    invalid = defined.keys() - valid
    raise "#{context}: Invalid TLS protocols found: [#{invalid.join(', ')}] in tls.protocols" \
      if invalid.any?

    flags = []
    flags << "no-sslv3"       unless defined["sslv3"]
    flags << "no-tlsv10"      unless defined["tlsv1.0"]
    flags << "no-tlsv11"      unless defined["tlsv1.1"]
    flags << "no-tlsv12"      unless defined["tlsv1.2"]
    flags << "no-tls-tickets" unless defined["tls-tickets"]
    flags
  end

  nbproc =  p("tuning.processes")

  # Accept Proxy
  accept_proxy     = p("accept-proxy", nil) ? "accept-proxy" : ""
  tcp_accept_proxy = p("disable_tcp_accept_proxy",nil) ? "" : accept_proxy

  # TLS
  default_protocols = protocols(p("tls.protocols"), "global defaults")

-%>

global
    log <%= p('logging.destination') %> <%= p('logging.facility') %> <%= p('logging.level') %>
    daemon
<% if nbproc > 1 then -%>
    nbproc <%= nbproc %>
<% end -%>
    user vcap
    group vcap
    maxconn 64000
    spread-checks 4
    tune.ssl.default-dh-param <%= p("tls.dh-params-max-bits") %>
    tune.bufsize <%= u2bytes(p("tuning.buffers").to_s) %>
<% 
  if nbproc > 1
    1.upto(nbproc) do |proc|
-%>
    stats socket /var/vcap/sys/run/haproxy/stats<%= proc %>.sock mode 600 level admin process <%= proc %>
<%
    end 
  else
-%>
    stats socket /var/vcap/sys/run/haproxy/stats.sock mode 600 level admin
<%
  end 
-%>
    stats timeout 2m
    ssl-default-bind-options <%= default_protocols.join(" ") %>
    ssl-default-bind-ciphers <%= ciphers(p("tls.ciphers")) %>
    ssl-default-server-options <%= default_protocols.join(" ") %>
    ssl-default-server-ciphers <%= ciphers(p("tls.ciphers")) %>

defaults
    log global
    option log-health-checks
    option log-separate-errors
    maxconn 64000
    option contstats
    timeout connect         <%= (p("timeouts.connect").to_f    * 1000).to_i %>ms
    timeout client          <%= (p("timeouts.client").to_f     * 1000).to_i %>ms
    timeout server          <%= (p("timeouts.server").to_f     * 1000).to_i %>ms
    timeout tunnel          <%= (p("timeouts.websocket").to_f  * 1000).to_i %>ms
    timeout http-keep-alive <%= (p("timeouts.keepalive").to_f  * 1000).to_i %>ms
    timeout http-request    <%= (p("timeouts.request").to_f    * 1000).to_i %>ms
    timeout queue           <%= (p("timeouts.queue").to_f      * 1000).to_i %>ms
<%
  deconstruct(p("load-balancers")).each_with_index do |lb,i|
    name = lb["name"]
    comment = ""
    if name && name !~ /^[a-z][-a-z0-9_]*$/ then
      comment = " # #{name.gsub(/\n.*/, '')}"
      name = nil
    end
    name ||= "lb#{i}"

    context = "load balancer [#{name}#{comment}]"

    mode    = lb["mode"] || "http"
    fe_port = (lb["port"] || (lb.has_key?("tls") ? 443 : 80)).to_s

    backend   = lb["backend"]
    redir     = lb["redirect_to_https"]
    block_all = lb['block_all']

    raise "#{context}: missing 'backend','redirect: all' or 'block_all' property" \
      unless backend or redir == "all" or block_all

    if backend then
      raise "#{context}: missing 'backend.addresses' property" \
        unless backend['addresses'] or backend['link']

      backend_compress_types = backend["compress-types"] || p("compress-types")
      backend_port           = (backend["port"] || fe_port).to_s

      if backend['addresses']
        backend_servers = backend['addresses'].map {|s| s =~ /:[0-9]*$/ ? s : "#{s}:#{backend_port}"}
      else
        upstream = link(backend['link'])
        if upstream then
          backed_port = upstream.p('port', backend_port).to_s
          backend_servers = upstream.instances.map(&:address)
          if backend['prefer-local-az'] then
            backend_servers = upstream.instances.select { |x| x.az == spec.az }.map(&:address)
          end
        else
          raise "#{context}: link '#{backend['link']}' not found..."
        end
      end
    end

    # TLS
    tls = lb["tls"]
    if tls then
      raise "#{context}: no certificates specified (use the 'tls.certiticates' property)" \
        unless tls.has_key?("certificates")

      flags = tls.has_key?("protocols") \
            ? protocols(tls["protocols"], context)
            : default_protocols
      raise "#{context}: no TLS protocols specified (use the 'tls.protocols' property) and none were set globally" \
        unless flags.any?

      tls_bind_options  = "ssl crt /var/vcap/jobs/haproxy/config/ssl/#{name} #{flags.join(" ")}"
      tls_bind_options += " ciphers #{ciphers(tls["ciphers"])}" if tls["ciphers"] and tls["ciphers"].any?
      tls_bind_options += " strict-sni" if tls["strict-sni"]

    elsif fe_port == "443"
      raise "#{context}: front-end port is 443, but no certificates specified (use the 'tls.certiticates' property)"
    end
-%>

listen <%= name + (comment || "") %>
    mode <%= mode %>
<% if mode == "http" -%>
    option http-server-close
    option httplog
    option forwardfor
<% else -%>
    option tcplog
<% end -%>
    bind <%= "#{lb.fetch("ip","")}:#{fe_port}" %> <%= lb["accept_proxy"] ? "accept-proxy" : "" %>  <%= tls_bind_options %>
    capture request header Host len 256
<% # Process ACLs
    (lb["acls"] || []).each_with_index do |acl,ii|
      acl_name = acl["name"] || "acl-#{ii}" 
      acl_deny = mode == "http" ? "http-request deny" : 'tcp-request connection reject'
      checks = []

      raise "load-balancer '#{name}' acl '#{acl_name}' must specify EITHER allow or deny" \
        if (acl.keys & ["allow","deny"]).length != 1
%>
<% # ^ Break to place blank line between acl stanzas
      if acl["domains"] then
        raise "#{context}: ACLs cannot check against domains in TCP mode" \
          if mode == "tcp"

        checks << "#{name}-#{acl_name}-domains"
        acl["domains"].each do |domain| 
-%>
    acl <%= "#{name}-#{acl_name}-domains" %> hdr(Host) -m sub <%= domain %>
<%
        end
      end

      if acl["allow"] then
        if !acl["allow"].is_a? Array then
          acl['allow'] = [acl['allow']]
        end
        acl["allow"].each do |allow|
-%>
    acl <%= "#{name}-#{acl_name}-allow" %> src <%= allow %>
<%
        end
-%>
    <%= acl_deny %> <%= "if" -%> <%= (checks + ["!#{name}-#{acl_name}-allow"]).join(" ") %>
<% 
      end

      if acl["deny"] then
        acl["deny"].each do |deny|
-%>
    acl <%= "#{name}-#{acl_name}-deny" %> src <%= deny %>
<%
        end
-%>
    <%= acl_deny %> <%= "if" -%> <%= (checks + ["#{name}-#{acl_name}-deny"]).join(" ") %>
<%
      end
    end

    if redir == "all" then
-%>

    redirect scheme https code 301 <%= "if" -%> !{ ssl_fc }
<%
    elsif redir.respond_to?(:has_key?) && redir.has_key?('domains') then
-%>

    acl ssl_redirect hdr(host),lower,map_end(/var/vcap/jobs/haproxy/config/ssl_redirect_<%= name %>.map,false) -m str true
    redirect scheme https code 301 <%= "if" -%> ssl_redirect
<%
    elsif !redir.nil?
      raise "#{context}: the 'redirect_to_https' property must be either 'all' or 'domains: [<list of domains>]'"
    end

    if block_all then
-%>

    tcp-request content reject
<%
    end

    if tls then
-%>

    acl xfp_exists hdr_cnt(X-Forwarded-Proto) gt 0
    reqadd X-Forwarded-Proto:\ https <%= "if" -%> ! xfp_exists
<% 
    end
-%>

    balance roundrobin
<%
    if backend_compress_types && backend_compress_types.size > 0 then
-%>
    compression algo gzip
    compression type <%= backend_compress_types.join(" ") %>
<%
    end

    (backend_servers || []).each_with_index do |addr, ii| -%>
    server srv<%= ii %> <%= addr -%> check inter 1000
<%
    end
  end
end
-%>
