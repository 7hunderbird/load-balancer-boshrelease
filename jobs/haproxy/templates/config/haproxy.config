<% # vim:ft=eruby
if p("config",nil)
-%>
<%= p("config") %>
<%
else
  # Ruby functions and variables to make the template more readable

  # Helper function for sub-structs
  def deconstruct(x)
    return x.map {|a| deconstruct(a)} if x.is_a? Array
    return x unless x.is_a? OpenStruct
    h = {}
    x.to_h.each do |k,v|
      h[k.to_s] = deconstruct(v)
    end
    return h
  end

  nbproc =  p("processes")

  # Accept Proxy
  accept_proxy     = p("accept-proxy", nil) ? "accept-proxy" : ""
  tcp_accept_proxy = p("disable_tcp_accept_proxy",nil) ? "" : accept_proxy

  # TLS
  valid_tls_protocols = ["ssl v3", "tls v1.0", "tls v1.1","tls v1.2", "tls tickets"]
  d_tls_protocols = p("tls.default-protocols").inject({}) {|h,k| h[k.downcase] = 1; h}
  bad_protocols = d_tls_protocols.keys() - valid_tls_protocols
  abort("Invalid tls protocol(s): #{bad_protocols.join(" ")}") if bad_protocols.length > 0
  d_tls_flags = []
  d_tls_flags << "no-sslv3"       unless d_tls_protocols["ssl v3"]
  d_tls_flags << "no-tlsv10"      unless d_tls_protocols["tls v1.0"]
  d_tls_flags << "no-tlsv11"      unless d_tls_protocols["tls v1.1"]
  d_tls_flags << "no-tlsv12"      unless d_tls_protocols["tls v1.2"]
  d_tls_flags << "no-tls-tickets" unless d_tls_protocols["tls tickets"]

-%>

global
    log <%= p('syslog-server') %> syslog <%= p('log-level') %>
    daemon
<% if nbproc > 1 then -%>
    nbproc <%= nbproc %>
<% end -%>
    user vcap
    group vcap
    maxconn 64000
    spread-checks 4
    tune.ssl.default-dh-param <%= p("tls.default-dh-param") %>
    tune.bufsize <%= p("buffer-size-bytes") %>
<% 
  if nbproc > 1
    1.upto(nbproc) do |proc|
-%>
    stats socket /var/vcap/sys/run/haproxy/stats<%= proc %>.sock mode 600 level admin process <%= proc %>
<%
    end 
  else
-%>
    stats socket /var/vcap/sys/run/haproxy/stats.sock mode 600 level admin
<%
  end 
-%>
    stats timeout 2m
    ssl-default-bind-options <%= d_tls_flags.join(" ") %>
    ssl-default-bind-ciphers <%= p("tls.default-ciphers") %>
    ssl-default-server-options <%= d_tls_flags.join(" ") %>
    ssl-default-server-ciphers <%= p("tls.default-ciphers") %>

defaults
    log global
    option log-health-checks
    option log-separate-errors
    maxconn 64000
    option http-server-close
    option httplog
    option forwardfor
    option contstats
    timeout connect         <%= (p("timeouts.connect").to_f    * 1000).to_i %>ms
    timeout client          <%= (p("timeouts.client").to_f     * 1000).to_i %>ms
    timeout server          <%= (p("timeouts.server").to_f     * 1000).to_i %>ms
    timeout tunnel          <%= (p("timeouts.websocket").to_f  * 1000).to_i %>ms
    timeout http-keep-alive <%= (p("timeouts.keepalive").to_f  * 1000).to_i %>ms
    timeout http-request    <%= (p("timeouts.request").to_f    * 1000).to_i %>ms
    timeout queue           <%= (p("timeouts.queue").to_f      * 1000).to_i %>ms
<%
  deconstruct(p("load-balancers")).each_with_index do |lb,i|
    lb_name = lb["name"]
    if lb_name && lb_name !~ /^[a-z][-a-z0-9_]*$/ then
      lb_comment = " # "+lb_name
      lb_name = nil
    end
    lb_name ||= "lb#{i}"

    lb_mode = lb["mode"] || "http"
    frontend_port = lb["port"] || (lb.has_key?("tls") ? "443" : "80")

    # TODO: specify link to instances in config instead of using static IPs
    backend = lb["backend"]
    redir = lb["redirect_to_https"]
    block_all = lb['block_all']

    abort("load-balancer '#{lb_name}' missing 'backend','redirect: all' or 'block_all' property") unless backend or redir == "all" or block_all
    if backend then
      backend_port = backend["port"] || frontend_port
      abort("load-balancer '#{lb_name}' missing 'backend.addresses' property") unless backend['addresses']
      backend_servers = backend['addresses'].map {|s| s =~ /:[0-9]*$/ ? s : "#{s}:#{backend_port}"}
      backend_compress_types = backend["compress-types"] || p("compress-types",[])
    end

    # TLS
    tls=lb["tls"]
    if tls then
      tls_protocols = {}
      tls_flags = []
      if tls.has_key?("protocols") then
        tls_protocols = tls.fetch("protocols").inject({}) {|h,k| h[k.downcase] = 1; h}
        bad_protocols = tls_protocols.keys() - valid_tls_protocols
        abort("load-balancer '#{lb_name}' tls.protocols contains invalid protocol(s): #{bad_protocols.join(" ")}") if bad_protocols.length > 0
        tls_flags << "no-sslv3"       unless tls_protocols["ssl v3"]
        tls_flags << "no-tlsv10"      unless tls_protocols["tls v1.0"]
        tls_flags << "no-tlsv11"      unless tls_protocols["tls v1.1"]
        tls_flags << "no-tlsv12"      unless tls_protocols["tls v1.2"]
        tls_flags << "no-tls-tickets" unless tls_protocols["tls tickets"]
      end
      abort("load-balancer '#{lb_name}' missing tls.protocols property (no default protocols)") unless tls_protocols.keys.length > 0 or d_tls_protocols.keys.length > 0

      # TLS Bind Options
      abort("load-balancer '#{lb_name}' is missing tls.certiticates property") unless tls.has_key?("certificates")
      tls_bind_options = "ssl crt /var/vcap/jobs/haproxy/config/ssl/#{lb_name} #{tls_flags.join(" ")}"
      tls_bind_options += " ciphers #{tls["ciphers"]}" if tls["ciphers"]
      tls_bind_options += " strict-sni" if tls["strict-sni"]
    elsif frontend_port == "443"
      abort("load-balancer '#{lb_name}' is missing tls.certiticates property") unless tls.has_key?("certificates")
    end
-%>

listen <%= lb_name + (lb_comment || "") %>
    mode <%= lb_mode %>
    bind <%= "#{lb.fetch("ip","")}:#{frontend_port}" %> <%= lb["accept_proxy"] ? "accept-proxy" : "" %>  <%= tls_bind_options %>
    capture request header Host len 256
<% # Process ACLs
    (lb["acls"] || []).each_with_index do |acl,ii|
      acl_name = acl["name"] || "acl-#{ii}" 
      acl_deny = lb_mode == "http" ? "http-request deny" : 'tcp-request connection reject'
      checks=[]
      if ((acl.keys & ["allow","deny"]).length != 1) then
        abort("load-balancer '#{lb_name}' acl '#{acl_name}' must specify EITHER allow or deny") 
      end
%>
<% # ^ Break to place blank line between acl stanzas
      if acl["domains"] then 
        abort("Cannot check against domains in TCP mode") if lb_mode == "tcp"
        checks << "#{lb_name}-#{acl_name}-domains"
        acl["domains"].each do |domain| 
-%>
    acl <%= "#{lb_name}-#{acl_name}-domains" %> hdr(Host) -m sub <%= domain %>
<%
        end
      end

      if acl["allow"] then
        acl["allow"].each do |allow|
-%>
    acl <%= "#{lb_name}-#{acl_name}-allow" %> src <%= allow %>
<%
        end
-%>
    <%= acl_deny %> <%= "if" -%> <%= (checks + ["!#{lb_name}-#{acl_name}-allow"]).join(" ") %>
<% 
      end

      if acl["deny"] then
        acl["deny"].each do |deny|
-%>
    acl <%= "#{lb_name}-#{acl_name}-deny" %> src <%= deny %>
<%
        end
-%>
    <%= acl_deny %> <%= "if" -%> <%= (checks + ["#{lb_name}-#{acl_name}-deny"]).join(" ") %>
<%
      end
    end

    if redir == "all" then
-%>

    redirect scheme https code 301 <%= "if" -%> !{ ssl_fc }
<%
    elsif redir.respond_to?(:has_key?) && redir.has_key?('domains') then
-%>

    acl ssl_redirect hdr(host),lower,map_end(/var/vcap/jobs/haproxy/config/ssl_redirect_<%= lb_name %>.map,false) -m str true
    redirect scheme https code 301 <%= "if" -%> ssl_redirect
<%
    elsif ! redir.nil?
      abort("load-balancer '#{lb_name}' redirect_to_https property must be either 'all' or 'domains: [<list of domains>]'")
    end

    if block_all then
-%>

    tcp-request content reject
<%
    end

    if tls then
-%>

    acl xfp_exists hdr_cnt(X-Forwarded-Proto) gt 0
    reqadd X-Forwarded-Proto:\ https <%= "if" -%> ! xfp_exists
<% 
    end
-%>

    balance roundrobin
<%
    if backend_compress_types.size > 0 then
-%>
    compression algo gzip
    compression type <%= backend_compress_types.join(" ") %>
<%
    end

    backend_servers.each_with_index do |addr, ii| -%>
    server srv<%= ii %> <%= addr -%> check inter 1000
<%
    end
  end
end
-%>
